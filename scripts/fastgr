#!/usr/bin/env mantidpythonnightly
import sys
import numpy as np
from PyQt4 import QtCore, QtGui, uic
from fastgr import Ui_MainWindow
from mantid.simpleapi import CreateWorkspace, SavePDFGui

class MyApp(QtGui.QMainWindow, Ui_MainWindow):
    GR = None

    def __init__(self):
        QtGui.QApplication.setStyle(QtGui.QStyleFactory.create("Cleanlooks"))
        QtGui.QMainWindow.__init__(self)
        Ui_MainWindow.__init__(self)
        self.setupUi(self)
        #btn commands
        self.btnGenerateGR.clicked.connect(self.calculateGR)
        self.btnLoadSQ.clicked.connect(self.read_SQ_file)
        self.btnPlotGR.clicked.connect(self.plot_GR)
        self.btnPlotSQ.clicked.connect(self.plot_SQ)
        self.btnSaveGR.clicked.connect(self.save_GR_file)
        self.btnPlotQSQ.clicked.connect(self.plot_QSQ)
        self.btnPlotSQ.setEnabled(False)
        self.btnPlotGR.setEnabled(False)
        self.btnGenerateGR.setEnabled(False)
        self.btnSaveGR.setEnabled(False)
        self.btnPlotQSQ.setEnabled(False)

        self.loaded_once = False

        self.top_plot.set_xlabel('Q ($\\AA^{-1}$)')
        self.top_plot.canvas.ax.figure.tight_layout()
        self.bottom_plot.set_xlabel('r ($\\AA$)')
        self.top_plot.canvas.ax.figure.tight_layout()

        #setup variables
        self.Q = []
        self.SQ = []

    def read_SQ_file(self):
        # clear out the current plots
        self.top_plot.canvas.ax.clear()
        self.top_plot.canvas.ax.figure.tight_layout()
        self.bottom_plot.canvas.ax.clear()
        self.bottom_plot.canvas.ax.figure.tight_layout()

        self.Q = []
        self.SQ = []

        name = QtGui.QFileDialog.getOpenFileName(self, 'Opener File Thinger')
        print "opening file: "+str(name)
        with open(name, 'r') as myfile:
            data = myfile.readlines()

        #print "file length was "+str(len(data))
        #determine length of junk at start of file
        for i in range(len(data)):
            if(len(data[i].strip()) > 0): #check that not a blank line
                is_good = True
                for k in range(i,i+10):
                    if (len(data[k].strip())) > 0: #now check if THIS line isn't blank
                        try:
                            float(data[k].split()[0])
                            yes_this = True
                        except ValueError:
                            yes_this = False

                        if yes_this:
                            pass #s'all good
                        else:
                            is_good = False
                            break
                    else:
                        is_good = False
                        break
            if is_good:
                start = i
                break
            #override
            #start = 5
            #print "starting at start "+str(start)

        for i in range(0,len(data)-start):
            self.Q.append(float(data[i+start].split()[0]))
            self.SQ.append(float(data[i+start].split()[1]))

        #configure Spin Boxes based on data (assume linearly spaced)
        if self.loaded_once == False:
            self.doubleSpinBoxQmin.setValue(self.Q[0])
            self.doubleSpinBoxQmax.setValue(self.Q[len(self.Q)-1])
            self.doubleSpinBoxQmin.setMinimum(self.Q[0])
            self.doubleSpinBoxQmin.setMaximum(self.Q[len(self.Q)-2])
            self.doubleSpinBoxQmax.setMaximum(self.Q[len(self.Q)-1])
            delq = self.Q[1]-self.Q[0]
            self.doubleSpinBoxQmin.setSingleStep(delq)
            self.doubleSpinBoxQmax.setSingleStep(delq)
            self.loaded_once = True

        self.plot_SQ()

        self.btnPlotSQ.setEnabled(True)
        self.btnGenerateGR.setEnabled(True)
        self.btnPlotQSQ.setEnabled(True)

    def save_GR_file(self):
        #name = QtGui.QFileDialog.getSaveFileName(self, 'Makey-Saves')
        maybe_name = "myGR_Qmin"+str(self.doubleSpinBoxQmin.value())+"_Qmax"+str(self.doubleSpinBoxQmax.value())+".gr"
        name = QtGui.QFileDialog.getSaveFileName(self, ('Makey-Saves'),maybe_name)

        SavePDFGui(InputWorkspace=self.GR, Filename=str(name))

    def calculateGR(self):
        rmax = float(self.doubleSpinBoxRmax.value())
        rmin = float(self.doubleSpinBoxRmin.value())
        delr = float(self.doubleSpinBoxDelR.value())
        qmin = float(self.doubleSpinBoxQmin.value())
        qmax = float(self.doubleSpinBoxQmax.value())
        if qmin >= qmax:
            raise RuntimeError("Qmin must be less than Qmax (%f >= %f)"
                               % (qmin, qmax))

        rArray = np.arange(rmin,rmax+delr,delr)
        GrArray = np.zeros(len(rArray))

        for ri in range(len(rArray)):
            completed_per = 100.0 * rArray[ri] / rArray[len(rArray)-1]
            self.progressBar.setValue(completed_per)
            for qi in range(len(self.Q)):
                if self.Q[qi] >= qmin and self.Q[qi] <= qmax:
                    GrArray[ri] = GrArray[ri] \
                                  + self.Q[qi]*(self.SQ[qi])*np.sin(rArray[ri]*self.Q[qi])

        self.GR = CreateWorkspace(OutputWorkspace='Gr',
                                  UnitX='Label',
                                  YUnitLabel='PDF',
                                  DataX=rArray, DataY=GrArray)
        # set units for SavePDFGui
        self.GR.getAxis(0).getUnit().setLabel('AtomicDistance', 'Angstrom')
        # add Q-range
        self.GR.mutableRun().addProperty("Qmin", qmin,
                                         "Angstroms^-1", True);
        self.GR.mutableRun().addProperty("Qmax", qmax,
                                         "Angstroms^-1", True);

        self.GR /= (16.0 * np.pi)  # TODO wonky factor should go away

        self.btnPlotGR.setEnabled(True)
        self.btnSaveGR.setEnabled(True)

        self.plot_GR()

    def plot_QSQ(self):
        qsq = np.copy(self.SQ)
        for i in range(len(qsq)):
            qsq[i] = qsq[i] * self.Q[i]

        self.top_plot.canvas.ax.clear()
        self.top_plot.canvas.ax.plot(self.Q, qsq)
        self.top_plot.set_xlabel('Q ($\\AA^{-1}$)')
        self.top_plot.set_ylabel('Q S(Q) ($\\AA^{-1}$)')
        self.top_plot.canvas.ax.figure.tight_layout()
        self.top_plot.canvas.draw()

    def plot_SQ(self):
        self.top_plot.canvas.ax.clear()
        self.top_plot.canvas.ax.plot(self.Q, self.SQ)
        self.top_plot.set_xlabel('Q ($\\AA^{-1}$)')
        self.top_plot.canvas.ax.set_xbound(self.Q[0], self.Q[-1])
        self.top_plot.set_ylabel('S(Q)')
        self.top_plot.canvas.ax.figure.tight_layout()
        self.top_plot.canvas.draw()

    def plot_GR(self):
        self.bottom_plot.canvas.ax.clear()
        self.bottom_plot.canvas.ax.plot(self.GR.readX(0), self.GR.readY(0))
        self.bottom_plot.set_xlabel('r ($\\AA$)')
        self.bottom_plot.canvas.ax.set_xbound(self.GR.readX(0)[0],
                                              self.GR.readX(0)[-1])
        self.bottom_plot.set_ylabel('G(r) ($\\AA^{-2}$)')
        self.bottom_plot.canvas.ax.figure.tight_layout()
        self.bottom_plot.canvas.draw()

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    window = MyApp()
    window.show()
    sys.exit(app.exec_())
